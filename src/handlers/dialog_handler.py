from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from loader import bot, dp, db
from state_groups import UserStates
from markups import main_markup
from aiogram.dispatcher.filters import Text

import datetime
import asyncio


loners = {}


async def search_companion_handler(message: Message, state: FSMContext):
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res = await db.fetchone("SELECT interests FROM users WHERE tg_id=?", [chat_id])
    user_interests = list(map(int, res[0].split(' ')))
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—É—á—É –æ–¥–∏–Ω–æ—á–µ–∫
    loners[chat_id] = user_interests
    msg = await bot.send_message(chat_id, '–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ 10 —Å–µ–∫.')
    for i in range(1, 11):
        await asyncio.sleep(1)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∑–Ω–∞—á–∏—Ç –µ–≥–æ —É–∂–µ –∫—Ç–æ-—Ç–æ –∑–∞–±—Ä–∞–ª
        if not (chat_id in loners):
            await msg.edit_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
            return None
        second = 10 - i
        await msg.edit_text(f'–ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ {second} —Å–µ–∫.')
        for loner_id, loner_interests in loners.items():
            if loner_id == chat_id:
                continue
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            co = sum(map(lambda x: x[0] == x[1], zip(user_interests, loner_interests))) / len(user_interests)
            # –ü–ª–∞–Ω–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥–æ–π —Å–µ–∫—É–Ω–¥–æ–π
            if co >= second / 10:
                loners.pop(loner_id)
                loners.pop(chat_id)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º id –∞–±–æ–Ω–µ–Ω—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–º—É—Ç–∞—Ü–∏–∏
                await UserStates.commutation.set()
                async with state.proxy() as data:
                    data['last_activity'] = datetime.datetime.now()
                    data['commute_id'] = loner_id
                await dp.storage.set_state(chat=loner_id, state=UserStates.commutation)
                await dp.storage.update_data(chat=loner_id, commute_id=chat_id, last_activity=datetime.datetime.now())
                await msg.edit_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥')
                return None
    # –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å —É–±–∏—Ä–∞–µ–º id –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–¥–∏–Ω–æ—á–µ–∫ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∏—Å–∫
    loners.pop(chat_id)
    await bot.send_message(chat_id, '–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ', reply_markup=main_markup())


async def stop_dialog_handler(message: Message, state: FSMContext):
    chat_id = message.chat.id
    async with state.proxy() as data:
        await bot.send_message(data['commute_id'], '–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω')
        await dp.storage.finish(chat=data['commute_id'])
        await bot.send_message(chat_id, '–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω', reply_markup=main_markup())
        await state.finish()


async def commute_handler(message: Message, state: FSMContext):
    chat_id = message.chat.id
    async with state.proxy() as data:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –±–æ–ª—å—à–µ —á–∞—Å–∞ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ–∞–Ω—Å
        if data['last_activity'] + datetime.timedelta(hours=1) < datetime.datetime.now():
            await bot.send_message(chat_id, '–í—ã –Ω–µ –æ–±—â–∞–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, –¥–∏–∞–ª–æ–≥ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω.')
            await state.reset_state(with_data=False)
            return None
        data['last_activity'] = datetime.datetime.now()
        await bot.send_message(data['commute_id'], message.text)


def register_dialog_handlers(disp: Dispatcher):
    disp.register_message_handler(search_companion_handler, text=['üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫'])
    disp.register_message_handler(search_companion_handler, commands=['search'])
    disp.register_message_handler(stop_dialog_handler, commands=['stop'], state=UserStates.commutation)
    disp.register_message_handler(commute_handler, state=UserStates.commutation)
