from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram import Dispatcher
from loader import bot, config, db


def gen_interests_markup(user_interests: list[bool | int]) -> InlineKeyboardMarkup:
    """ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª """
    markup = InlineKeyboardMarkup()
    for i in range(len(config.interests)):
        text = ''
        if user_interests[i]:
            text += '‚úÖ '
        text += config.interests[i]
        markup.add(InlineKeyboardButton(text, callback_data=f'interest_{i}'))
    markup.add(InlineKeyboardButton('üóë –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã', callback_data='throw_off'))
    return markup


async def interests_handler(message: Message):
    chat_id = message.chat.id
    res = await db.fetchone("SELECT interests FROM users WHERE tg_id=?", [chat_id])
    interests = list(map(int, res[0].split(' ')))
    markup = gen_interests_markup(interests)
    await bot.send_message(
        chat_id,
        '–ú—ã –ø–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤–∞—Å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±–µ—Ä–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:',
        reply_markup=markup)


async def interests_callback(query: CallbackQuery):
    qdata = query.data
    chat_id = query.message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    res = await db.fetchone("SELECT interests FROM users WHERE tg_id=?", [chat_id])
    interests = list(map(int, res[0].split(' ')))
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º
    if qdata.startswith('interest_'):
        # –ú–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
        interest_id = int(qdata.split('_')[1])
        interests[interest_id] = int(not interests[interest_id])
    else:
        interests = [0] * len(interests)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.query("UPDATE users SET interests=? WHERE tg_id=?", [" ".join(map(str, interests)), chat_id])
    markup = gen_interests_markup(interests)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await query.message.edit_reply_markup(markup)
    await query.answer()


def register_settings_handlers(disp: Dispatcher):
    disp.register_message_handler(interests_handler, text=['‚≠ê –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞'])
    disp.register_message_handler(interests_handler, commands=['interests'])
    disp.register_callback_query_handler(interests_callback,
                                         lambda x: x.data.startswith('interest_') or x.data == 'throw_off')

